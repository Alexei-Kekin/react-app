{"version":3,"sources":["components/FilmsList.jsx","components/FilmDetails.jsx","App.js","serviceWorker.js","index.js"],"names":["FilmsList","data","onClick","className","sort","a","b","title","toLowerCase","map","film","id","episode_id","key","FilmDetails","details","i","JSON","stringify","App","useState","setTitle","films","setFilms","setDetails","filteredFilms","filter","indexOf","trim","useEffect","fetch","then","json","catch","error","console","results","load","type","onChange","event","target","value","onKeyDown","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"qUAGe,SAASA,EAAT,GAAsC,IAAjBC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,QAEtC,OACI,yBAAKC,UAAU,cACX,4BACKF,EACIG,MAAK,SAASC,EAAGC,GAClB,OAAGD,EAAEE,MAAMC,cAAgBF,EAAEC,MAAMC,eAAuB,EACvDH,EAAEE,MAAMC,cAAgBF,EAAEC,MAAMC,cAAsB,EAClD,KAENC,KAAI,SAACC,GAAgC,IAA1BC,EAAyB,uDAApBD,EAAKE,WACtB,OACG,yBACIC,IAAKF,GAEL,wBAAIT,QAAS,kBAAMA,EAAQQ,KAAQA,EAAKH,a,MChBnD,SAASO,EAAT,GAA6C,IAAvBC,EAAsB,EAAtBA,QAASb,EAAa,EAAbA,QAAa,EAAJc,EAEpD,OACI,yBACIb,UAAU,eACVD,QAASA,GAET,6BAAK,0BAAMS,GAAG,OAAOR,UAAU,QAAQc,KAAKC,UAAUH,EAAS,KAAM,M,MCLlE,SAASI,IAAO,IAAD,EAEJC,mBAAS,IAFL,mBAEvBb,EAFuB,KAEhBc,EAFgB,OAGJD,mBAAS,IAHL,mBAGvBE,EAHuB,KAGhBC,EAHgB,OAIAH,mBAAS,MAJT,mBAIvBL,EAJuB,KAIdS,EAJc,KAYpBC,EAAgBH,EAAMI,QAAO,SAAAzB,GAAI,OAC+B,IAAlEA,EAAKM,MAAMC,cAAcmB,QAAQpB,EAAMqB,OAAOpB,kBA8BpD,OAbEqB,qBAAU,WAAM,4CACb,4BAAAxB,EAAA,sEACuByB,MAAM,gCACpBC,MAAK,SAAA9B,GAAI,OAAIA,EAAK+B,UAClBC,OAAM,SAACC,GACRC,QAAQD,MAAMA,MAJtB,OACUjC,EADV,OAMIsB,EAAStB,EAAKmC,SANlB,4CADa,uBAAC,WAAD,wBAUZC,KACD,IAGH,yBAAKlC,UAAU,OACP,2BACIA,UAAU,eACVmC,KAAK,OACLC,SAzCa,SAACC,GACtBnB,EAASmB,EAAMC,OAAOC,QAyCdA,MAAOnC,EACPoC,UAlCoB,SAAAH,GACV,UAAdA,EAAM3B,KACNQ,EAAS,KAiCLuB,YAAY,uBAEhB,kBAAC,EAAD,CAAW3C,KAAMwB,EAAevB,QA/Bd,SAACD,GACvBuB,EAAWvB,MA+BHc,GACH,oCACO,kBAAC,EAAD,CACIA,QAASA,EACTb,QAhCO,WACvBsB,EAAW,WCpBCqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEd1B,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM0B,c","file":"static/js/main.21143ab9.chunk.js","sourcesContent":["import React from 'react';\r\nimport './FilmsList.scss'\r\n\r\nexport default function FilmsList({ data, onClick}) {\r\n\r\n    return (\r\n        <div className=\"films-list\">\r\n            <ul>\r\n                {data\r\n                    .sort(function(a, b) {\r\n                    if(a.title.toLowerCase() < b.title.toLowerCase()) return -1;\r\n                    if(a.title.toLowerCase() > b.title.toLowerCase()) return 1;\r\n                    return 0;\r\n                })\r\n                    .map((film, id = film.episode_id) => {\r\n                    return (\r\n                       <div\r\n                           key={id}\r\n                       >\r\n                           <li onClick={() => onClick(film)}>{film.title}</li>\r\n                       </div>\r\n                    )\r\n                 })}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport './FilmDetails.scss';\r\n\r\nexport default  function FilmDetails({details, onClick, i}) {\r\n\r\n    return (\r\n        <div\r\n            className=\"film-details\"\r\n            onClick={onClick}\r\n        >\r\n            <pre><code id=\"code\" className=\"json\">{JSON.stringify(details, null, 4)}</code></pre>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, {useEffect, useState} from 'react';\nimport FilmsList from \"./components/FilmsList\";\nimport FilmDetails from \"./components/FilmDetails\";\nimport './App.scss';\n\nexport default function App() {\n\nconst [title, setTitle] = useState('');\nconst [films, setFilms] = useState([]);\nconst [details, setDetails] = useState(null);\n\n\n    const handleInputTitle = (event) => {\n        setTitle(event.target.value)  ;\n    };\n\n\n    const filteredFilms = films.filter(data => (\n        data.title.toLowerCase().indexOf(title.trim().toLowerCase()) !== -1\n    ));\n\n    const handleTitleInputKeydown = event => {\n        if (event.key === 'Enter') {\n            setTitle('');\n        }\n    };\n\n    const handleOpenDetails = (data) => {\n        setDetails(data);\n    };\n\n    const handleCloseDetails = () => {\n        setDetails(null);\n    };\n\n    useEffect(() => {\n       async function load() {\n           const data = await fetch('https://swapi.dev/api/films/')\n               .then(data => data.json())\n               .catch((error) => {\n               console.error(error);\n           });\n           setFilms(data.results)\n       }\n\n        load();\n    }, []);\n\n  return (\n    <div className=\"App\">\n            <input\n                className=\"films-filter\"\n                type=\"text\"\n                onChange={handleInputTitle}\n                value={title}\n                onKeyDown={handleTitleInputKeydown}\n                placeholder=\"Type in for filter\"\n            />\n            <FilmsList data={filteredFilms} onClick={handleOpenDetails}/>\n            {   details && (\n             <>\n                    <FilmDetails\n                        details={details}\n                        onClick={handleCloseDetails}\n                    />\n             </>\n            )}\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}